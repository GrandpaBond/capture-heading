{"entries":[{"timestamp":1721743882364,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"d\"\n    ]"],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":228,"start2":228,"length1":11,"length2":42}]}]},{"timestamp":1721744273970,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":67,"start2":67,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// tests go here; this will not be compiled when this package is used as an extension.\nenum Config {\n    Live, // Normal usage (but use turntable Jig to pretend it's on a buggy)\n    Capture, // Acquire new test datasets, using turntable Jig\n    Analyse, // Test & debug (dataset selection is preset in code below)\n    Trace, // Gather full diagnostics using dataLogger\n}\nenum Task {\n    Scan,\n    SetNorth,\n    Measure\n}\n// NOTE: check in \"pxt-heading.ts\" that the required test dataset is available in simulateScan()!\nconst dataset = \"blup70_0714_1743\"\n\nfunction performSetup() {\n    let result = 0\n    switch (nextTask) {\n        case Task.Scan:\n            let scanTime = 6000 // ...to MANUALLY rotate turntable jig twice (SMOOOOTHLY!)\n            basic.showString(\"S\")\n            basic.pause(1000)\n            basic.showString(\"_\")\n            let result = heading.scanClockwise(scanTime)\n            if (result == 0) {\n                basic.showIcon(IconNames.Yes)\n                basic.pause(1000)\n            } else {\n                basic.showIcon(IconNames.Skull) // problem with scan data analysis\n                basic.pause(1000)\n                basic.showNumber(result)\n                basic.pause(1000)\n                basic.clearScreen()\n                basic.showArrow(ArrowNames.West)\n                nextTask = Task.Scan // restart with a fresh scan\n            }\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth\n            break\n\n        case Task.SetNorth:\n            basic.showString(\"N\")\n            basic.pause(1000)\n            basic.clearScreen()\n            result = heading.setNorth()\n\n            spinRPM = heading.spinRate() // ...just out of interest\n            basic.showNumber(Math.floor(spinRPM))\n            basic.pause(1000)\n            basic.showIcon(IconNames.Yes)\n            basic.pause(500)\n            basic.showLeds(`\n                # # . # #\n                # . . . #\n                . . # . .\n                # . . . #\n                # # . # #\n                `)\n            basic.pause(500)\n            basic.showArrow(ArrowNames.East)\n            nextTask = Task.Measure\n            break\n\n        case Task.Measure: // Button A allows new North setting\n            basic.showIcon(IconNames.No)\n            basic.pause(1000)\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth // reset new North\n            break\n    }\n\n}\n\nfunction measure() {\n    switch (nextTask) {\n        // ? sequence error?\n        case Task.SetNorth:\n        case Task.Scan: // use button A to do a scan first\n            for (let i = 0; i < 5; i++) {\n                basic.clearScreen()\n                basic.pause(100)\n                basic.showArrow(ArrowNames.West)\n            }\n            break\n\n        case Task.Measure: // OK, take a new heading measurement\n            basic.pause(200)\n            basic.clearScreen()\n            basic.pause(50)\n            let compass = heading.degrees()\n            basic.showNumber(Math.floor(compass))\n            basic.pause(500)\n            // now MANUALLY move to next test-angle...\n            basic.showLeds(`\n                    # # . # #\n                    # . . . #\n                    . . . . .\n                    # . . . #\n                    # # . # #\n                    `)\n            basic.pause(200)\n            break\n    }\n}\n\ninput.onButtonPressed(Button.A, function () {\n    performSetup()\n})\n\ninput.onButtonPressed(Button.B, function () {\n    measure()\n})\n\nlet nextTask: Task\nlet config = Config.Capture // --> Config.Live when A+B pressed\n\nfor (let i = 0; i < 5; i++) {\n    basic.clearScreen()\n    basic.pause(100)\n    basic.showString(\"C\") // no buggy, but use live magnetometer\n    basic.pause(1000)\n    basic.clearScreen()\n    basic.pause(200)\n    nextTask = Task.Scan // new mode, so always start with a scan\n    basic.showArrow(ArrowNames.West)\n}\nlet spinRPM = 0"],[0,"\n"]],"start1":0,"start2":0,"length1":3992,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   ]"],[-1,",\n    \"preferredEditor\": \"tsprj\""],[0,"\n}\n"]],"start1":232,"start2":232,"length1":39,"length2":7}]}]},{"timestamp":1721750445227,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-heading\": \"github:grandpabond/pxt-heading#v1.1.4\""],[0,"\n   "]],"start1":142,"start2":142,"length1":72,"length2":8}]}]},{"timestamp":1721751291795,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"on.\n"],[-1,"/*"],[0,"enum"]],"start1":83,"start2":83,"length1":10,"length2":8},{"diffs":[[0,"r\n}\n"],[-1,"*/\n"],[0,"enum"]],"start1":367,"start2":367,"length1":11,"length2":8},{"diffs":[[0,"es)\n"],[-1,"                fetchScan()\n"],[0,"    "]],"start1":967,"start2":967,"length1":36,"length2":8},{"diffs":[[0,"s))\n"],[-1,"            fetchSingle()\n"],[0,"    "]],"start1":3101,"start2":3101,"length1":34,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"\nfunction fetchScan() {\n\n}\n\nfunction fetchSingle() {\n\n}\n\n"],[0,"inpu"]],"start1":3443,"start2":3443,"length1":65,"length2":8},{"diffs":[[0,"e()\n})\n\n"],[-1,"\n\n\n\n\n"],[0,"let next"]],"start1":3572,"start2":3572,"length1":21,"length2":16},{"diffs":[[0,"k: Task\n"],[1,"let config = Config.Capture // --> Config.Live when A+B pressed\n\n"],[0,"for (let"]],"start1":3591,"start2":3591,"length1":16,"length2":81}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"1.4\""],[-1,",\n        \"datalogger\": \"*\""],[0,"\n   "]],"start1":206,"start2":206,"length1":35,"length2":8}]}]},{"timestamp":1721751578015,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    let scanX = \"\"\n    let scanY = \"\"\n    let scanZ = \"\"\n    let scanT = \"\"\n    let xyz:number[] = []\n    let stamp: number\n\n    for (let i = 0; i<heading.scanTimes.length; i++){\n        xyz = heading.scanData[i]\n        stamp = heading.scanTimes[i]\n        \n    }\n\n"],[0,"\n}\n\n"]],"start1":3526,"start2":3526,"length1":274,"length2":8}]}]},{"timestamp":1721799147875,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"       \n"],[-1,"        \n"],[0,"    }\n\n\n"]],"start1":3781,"start2":3781,"length1":25,"length2":16}]}]},{"timestamp":1721799749539,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"scan"],[-1,"T"],[1,"X"],[0," = \""],[-1,"let scanT = [\" + heading.scanTimes[0]"],[1,"\""],[0,"\n   "]],"start1":3538,"start2":3538,"length1":50,"length2":14},{"diffs":[[0,"scan"],[-1,"X"],[1,"Y"],[0," = \""],[1,"\"\n    "],[0,"let scan"],[-1,"X = [\" + heading.scanData[0][Dimension.X]"],[1,"Z = \"\""],[0,"\n   "]],"start1":3557,"start2":3557,"length1":62,"length2":33},{"diffs":[[0,"scan"],[-1,"Y"],[1,"T"],[0," = \""],[-1,"let scanY = [\" + heading.scanData[0][Dimension.Y]\n    let scanZ = \"let scanZ = [\" + heading.scanData[0][Dimension.Z]"],[1,"\"\n    let xyz:number[] = []\n    let stamp: number\n"],[0,"\n   "]],"start1":3595,"start2":3595,"length1":129,"length2":63},{"diffs":[[0,"let i = "],[-1,"1"],[1,"0"],[0,"; i<head"]],"start1":3664,"start2":3664,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"scanT += \", \" + heading.scanTimes[i]\n        scanX = \", \" + heading.scanData[0][Dimension.X]\n        scanY = \", \" + heading.scanData[0][Dimension.Y]\n        scanZ = \", \" + heading.scanData[0][Dimension.Z"],[1,"xyz = heading.scanData[i]\n        stamp = heading.scanTimes[i"],[0,"]\n    "],[-1,"}\n"],[0,"    "],[-1,"datalogger.log(\n        datalogger.createCV(\"\", scanT + \"]\"),\n        datalogger.createCV(\"\", scanX + \"]\"),\n        datalogger.createCV(\"\", scanT + \"]\"),\n        datalogger.createCV(\"\", scanT + \"]\")\n    )"],[1,"\n        \n    }\n"],[0,"\n\n}\n"],[1,"\n"],[0,"func"]],"start1":3713,"start2":3713,"length1":431,"length2":100}]}]},{"timestamp":1721800349722,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"logData(heading.scanTimes, heading.scanData"],[1,"fetchScan("],[0,")\n  "]],"start1":988,"start2":988,"length1":51,"length2":18},{"diffs":[[0,"North()\n"],[1,"\n"],[0,"        "]],"start1":1705,"start2":1705,"length1":16,"length2":17},{"diffs":[[0,"ion "],[-1,"logScanData() {\n}\n\nfunction logData(times: number[], values: number[][]"],[1,"fetchScan("],[0,") {\n"]],"start1":3512,"start2":3512,"length1":79,"length2":18},{"diffs":[[0,"    let "],[-1,"list"],[1,"scan"],[0,"T = \"let"]],"start1":3530,"start2":3530,"length1":20,"length2":20},{"diffs":[[0,"canT = [\" + "],[-1,"t"],[1,"heading.scanT"],[0,"imes[0]\n    "]],"start1":3552,"start2":3552,"length1":25,"length2":37},{"diffs":[[0,"    let "],[-1,"list"],[1,"scan"],[0,"X = \"let"]],"start1":3585,"start2":3585,"length1":20,"length2":20},{"diffs":[[0,"et scanX = [\" + "],[-1,"values"],[1,"heading.scanData"],[0,"[0][Dimension.X]"]],"start1":3603,"start2":3603,"length1":38,"length2":48},{"diffs":[[0,"    let "],[-1,"list"],[1,"scan"],[0,"Y = \"let"]],"start1":3652,"start2":3652,"length1":20,"length2":20},{"diffs":[[0,"et scanY = [\" + "],[-1,"values"],[1,"heading.scanData"],[0,"[0][Dimension.Y]"]],"start1":3670,"start2":3670,"length1":38,"length2":48},{"diffs":[[0,"    let "],[-1,"list"],[1,"scan"],[0,"Z = \"let"]],"start1":3719,"start2":3719,"length1":20,"length2":20},{"diffs":[[0," = [\" + "],[-1,"values"],[1,"heading.scanData"],[0,"[0][Dime"]],"start1":3745,"start2":3745,"length1":22,"length2":32},{"diffs":[[0,"1; i"],[-1," < t"],[1,"<heading.scanT"],[0,"imes"]],"start1":3803,"start2":3803,"length1":12,"length2":22},{"diffs":[[0,"length; i++)"],[-1," "],[0,"{\n        li"]],"start1":3826,"start2":3826,"length1":25,"length2":24},{"diffs":[[0,"        "],[-1,"list"],[1,"scan"],[0,"T += \", "]],"start1":3840,"start2":3840,"length1":20,"length2":20},{"diffs":[[0," \", \" + "],[-1,"t"],[1,"heading.scanT"],[0,"imes[i]\n"]],"start1":3856,"start2":3856,"length1":17,"length2":29},{"diffs":[[0,"        "],[-1,"list"],[1,"scan"],[0,"X = \", \""]],"start1":3885,"start2":3885,"length1":20,"length2":20},{"diffs":[[0,"nX = \", \" + "],[-1,"values[i"],[1,"heading.scanData[0"],[0,"][Dimension."]],"start1":3896,"start2":3896,"length1":32,"length2":42},{"diffs":[[0,"        "],[-1,"list"],[1,"scan"],[0,"Y = \", \""]],"start1":3941,"start2":3941,"length1":20,"length2":20},{"diffs":[[0,"nY = \", \" + "],[-1,"values[i"],[1,"heading.scanData[0"],[0,"][Dimension."]],"start1":3952,"start2":3952,"length1":32,"length2":42},{"diffs":[[0,"        "],[-1,"list"],[1,"scan"],[0,"Z = \", \""]],"start1":3997,"start2":3997,"length1":20,"length2":20},{"diffs":[[0,"\" + "],[-1,"values[i"],[1,"heading.scanData[0"],[0,"][Di"]],"start1":4016,"start2":4016,"length1":16,"length2":26},{"diffs":[[0,"eCV(\"\", "],[-1,"list"],[1,"scan"],[0,"T + \"]\")"]],"start1":4103,"start2":4103,"length1":20,"length2":20},{"diffs":[[0,"eCV(\"\", "],[-1,"list"],[1,"scan"],[0,"X + \"]\")"]],"start1":4149,"start2":4149,"length1":20,"length2":20},{"diffs":[[0,"\"\", "],[-1,"listY"],[1,"scanT"],[0," + \""]],"start1":4199,"start2":4199,"length1":13,"length2":13},{"diffs":[[0,"\"\", "],[-1,"listZ"],[1,"scanT"],[0," + \""]],"start1":4245,"start2":4245,"length1":13,"length2":13},{"diffs":[[0,"\n    )\n\n"],[1,"}\nfunction fetchSingle() {\n\n"],[0,"}\n\ninput"]],"start1":4261,"start2":4261,"length1":16,"length2":44},{"diffs":[[0,"})\n\n"],[-1,"    logData(heading.scanTimes, heading.scanData)"],[1,"input.onButtonPressed(Button.B, function () {\n    measure()\n})\n"],[0,"\n\n\n\n"]],"start1":4365,"start2":4365,"length1":56,"length2":71}]}]},{"timestamp":1721800630064,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ata("],[-1,"\"scan\", "],[0,"head"]],"start1":996,"start2":996,"length1":16,"length2":8},{"diffs":[[0,"mpass))\n"],[1,"            fetchSingle()\n"],[0,"        "]],"start1":3162,"start2":3162,"length1":16,"length2":42},{"diffs":[[0,"ata("],[-1,"tag: string, "],[0,"time"]],"start1":3580,"start2":3580,"length1":21,"length2":8},{"diffs":[[0," = \"let "],[-1,"\" + tag + \""],[1,"scan"],[0,"T = [\" +"]],"start1":3636,"start2":3636,"length1":27,"length2":20},{"diffs":[[0," = \"let "],[-1,"\" + tag + \""],[1,"scan"],[0,"X = [\" +"]],"start1":3679,"start2":3679,"length1":27,"length2":20},{"diffs":[[0," = \"let "],[-1,"\" + tag + \""],[1,"scan"],[0,"Y = [\" +"]],"start1":3736,"start2":3736,"length1":27,"length2":20},{"diffs":[[0,"let "],[-1,"\" + tag + \""],[1,"scan"],[0,"Z = "]],"start1":3797,"start2":3797,"length1":19,"length2":12},{"diffs":[[0,"  listX "],[-1,"+"],[0,"= \", \" +"]],"start1":3921,"start2":3921,"length1":17,"length2":16},{"diffs":[[0,"  listY "],[-1,"+"],[0,"= \", \" +"]],"start1":3967,"start2":3967,"length1":17,"length2":16},{"diffs":[[0,"  listZ "],[-1,"+"],[0,"= \", \" +"]],"start1":4013,"start2":4013,"length1":17,"length2":16},{"diffs":[[0,")\n    )\n"],[1,"\n"],[0,"}\n\ninput"]],"start1":4260,"start2":4260,"length1":16,"length2":17},{"diffs":[[0,"})\n\n"],[-1,"input.onButtonPressed(Button.B, function () {\n    measure()\n})\n\ninput.onButtonPressed(Button.AB, function () {\n    logData(\"test\", measure.test"],[1,"    logData(heading.scan"],[0,"Times, "],[-1,"measure.test"],[1,"heading.scan"],[0,"Data)\n"],[-1,"})"],[1,"\n\n\n"],[0,"\n\nle"]],"start1":4337,"start2":4337,"length1":178,"length2":60}]}]},{"timestamp":1721802383708,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"1.1."],[-1,"5"],[1,"4"],[0,"\",\n "]],"start1":204,"start2":204,"length1":9,"length2":9}]}]},{"timestamp":1721802435688,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\"test\", "],[-1,"heading"],[1,"measure"],[0,".testTim"]],"start1":4489,"start2":4489,"length1":23,"length2":23},{"diffs":[[0,"tTimes, "],[-1,"heading"],[1,"measure"],[0,".testDat"]],"start1":4508,"start2":4508,"length1":23,"length2":23}]}]},{"timestamp":1721803269326,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"() {\n}\n\n"],[-1,"/"],[0,"function"]],"start1":3541,"start2":3541,"length1":17,"length2":16}]}]},{"timestamp":1721803873684,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"}\n\n\n"],[-1,"/* "],[1,"function logScanData() {\n}\n\n/"],[0,"func"]],"start1":3517,"start2":3517,"length1":11,"length2":37},{"diffs":[[0,"  )\n"],[-1,"}*/\n\nfunction logData(tag: string, times: number[], values: number[][]) {\n    let pushT: string\n    let pushD: string\n    for (let i = 1; i < times.length; i++) {\n        pushT = tag + \"Times.push(\" + times[i] + \")\"\n        datalogger.log(datalogger.createCV(\"\", pushT))\n        pushD = tag + \"Data.push([\" + values[i][Dimension.X]\n        pushD += \", \" + values[i][Dimension.Y]\n        pushD += \", \" + values[i][Dimension.Z]\n        datalogger.log(datalogger.createCV(\"\", pus + \"]\"))\n"],[0,"}\n\ni"]],"start1":4291,"start2":4291,"length1":493,"length2":8}]}]},{"timestamp":1721804361340,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ult == 0) {\n"],[1,"                basic.showIcon(IconNames.Yes)\n"],[0,"            "]],"start1":918,"start2":918,"length1":24,"length2":70},{"diffs":[[0,"ta)\n"],[-1,"                basic.showIcon(IconNames.Yes)\n"],[0,"    "]],"start1":1041,"start2":1041,"length1":54,"length2":8},{"diffs":[[0," pus"],[-1,"hD"],[0," + \"]"],[-1,")"],[0,"\"))\n"],[-1,"    }\n"],[0,"}\n\ni"]],"start1":4741,"start2":4741,"length1":26,"length2":17},{"diffs":[[0,"ta)\n"],[-1,"    basic.showIcon(IconNames.Yes)\n    basic.pause(1000)\n"],[0,"})\n\n"]],"start1":4990,"start2":4990,"length1":64,"length2":8},{"diffs":[[0,".pause(100)\n"],[1,"    basic.showString(\"C\") // no buggy, but use live magnetometer\n    basic.pause(1000)\n"],[0,"    basic.cl"]],"start1":5080,"start2":5080,"length1":24,"length2":111},{"diffs":[[0,"st)\n"],[1,""],[0,"}\n"],[-1,"basic.showString(\"C\") // no buggy, but use live magnetometer\nbasic.pause(1000)\n"],[0,"let "]],"start1":5323,"start2":5323,"length1":89,"length2":10}]}]},{"timestamp":1721972636271,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}*/"],[-1,"\n// helpful for logging...\nfunction round2(v: number): number {\n    return (Math.round(100 * v) / 100)\n}"],[0,"\n\nfu"]],"start1":4268,"start2":4268,"length1":112,"length2":8}]}]},{"timestamp":1721972788156,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ak\n    }\n}\n\n"],[1,"\n/* function logData(tag: string, times: number[], values: number[][]) {\n    let listT = \"let \" + tag + \"T = [\" + times[0]\n    let listX = \"let \" + tag + \"X = [\" + values[0][Dimension.X]\n    let listY = \"let \" + tag + \"Y = [\" + values[0][Dimension.Y]\n    let listZ = \"let \" + tag + \"Z = [\" + values[0][Dimension.Z]\n    for (let i = 1; i < times.length; i++) {\n        listT += \", \" + times[i]\n        listX += \", \" + values[i][Dimension.X]\n        listY += \", \" + values[i][Dimension.Y]\n        listZ += \", \" + values[i][Dimension.Z]\n    }\n    datalogger.log(\n        datalogger.createCV(\"\", listT + \"]\"),\n        datalogger.createCV(\"\", listX + \"]\"),\n        datalogger.createCV(\"\", listY + \"]\"),\n        datalogger.createCV(\"\", listZ + \"]\")\n    )\n}*/\n// helpful for logging...\nfunction round2(v: number): number {\n    return (Math.round(100 * v) / 100)\n}\n\n"],[0,"function log"]],"start1":3508,"start2":3508,"length1":24,"length2":882},{"diffs":[[0,"a.push([\" + "],[-1,"round3("],[0,"values[i][Di"]],"start1":4670,"start2":4670,"length1":31,"length2":24},{"diffs":[[0,"nsion.X]"],[-1,")"],[0,"\n       "]],"start1":4696,"start2":4696,"length1":17,"length2":16},{"diffs":[[0,"pushD += \", \" + "],[-1,"round3("],[0,"values[i][Dimens"]],"start1":4713,"start2":4713,"length1":39,"length2":32},{"diffs":[[0,"nsion.Y]"],[-1,")"],[0,"\n       "]],"start1":4743,"start2":4743,"length1":17,"length2":16},{"diffs":[[0," \", \" + "],[-1,"round3("],[0,"values[i"]],"start1":4768,"start2":4768,"length1":23,"length2":16},{"diffs":[[0,"nsion.Z]"],[-1,")"],[0,"\n       "]],"start1":4790,"start2":4790,"length1":17,"length2":16},{"diffs":[[0,"\n}\n\n"],[-1,"// limit to three decimal places\nfunction round3(v: number): number {\n    return (Math.round(1000 * v) / 1000)\n}\n\n"],[0,"inpu"]],"start1":4866,"start2":4866,"length1":122,"length2":8}]}]},{"timestamp":1721975261587,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"fJC3l{]~v.B0^_JS5p{7\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"4XHn0!kmzVG]FtydAiLq\""],[0," x=\""]],"start1":149,"start2":149,"length1":34,"length2":8}]}]},{"timestamp":1721975261600,"editorVersion":"7.0.13","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":325,"start2":325,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1721743882363,"editorVersion":"7.0.13","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"capture heading\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1721750445227,"editorVersion":"7.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"// tests go here; this will not be compiled when this package is used as an extension.\nenum Config {\n    Live, // Normal usage (but use turntable Jig to pretend it's on a buggy)\n    Capture, // Acquire new test datasets, using turntable Jig\n    Analyse, // Test & debug (dataset selection is preset in code below)\n    Trace, // Gather full diagnostics using dataLogger\n}\nenum Task {\n    Scan,\n    SetNorth,\n    Measure\n}\n// NOTE: check in \"pxt-heading.ts\" that the required test dataset is available in simulateScan()!\nconst dataset = \"blup70_0714_1743\"\n\nfunction performSetup() {\n    let result = 0\n    switch (nextTask) {\n        case Task.Scan:\n            let scanTime = 6000 // ...to MANUALLY rotate turntable jig twice (SMOOOOTHLY!)\n            basic.showString(\"S\")\n            basic.pause(1000)\n            basic.showString(\"_\")\n            let result = heading.scanClockwise(scanTime)\n            if (result == 0) {\n                basic.showIcon(IconNames.Yes)\n                basic.pause(1000)\n            } else {\n                basic.showIcon(IconNames.Skull) // problem with scan data analysis\n                basic.pause(1000)\n                basic.showNumber(result)\n                basic.pause(1000)\n                basic.clearScreen()\n                basic.showArrow(ArrowNames.West)\n                nextTask = Task.Scan // restart with a fresh scan\n            }\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth\n            break\n\n        case Task.SetNorth:\n            basic.showString(\"N\")\n            basic.pause(1000)\n            basic.clearScreen()\n            result = heading.setNorth()\n\n            spinRPM = heading.spinRate() // ...just out of interest\n            basic.showNumber(Math.floor(spinRPM))\n            basic.pause(1000)\n            basic.showIcon(IconNames.Yes)\n            basic.pause(500)\n            basic.showLeds(`\n                # # . # #\n                # . . . #\n                . . # . .\n                # . . . #\n                # # . # #\n                `)\n            basic.pause(500)\n            basic.showArrow(ArrowNames.East)\n            nextTask = Task.Measure\n            break\n\n        case Task.Measure: // Button A allows new North setting\n            basic.showIcon(IconNames.No)\n            basic.pause(1000)\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth // reset new North\n            break\n    }\n\n}\n\nfunction measure() {\n    switch (nextTask) {\n        // ? sequence error?\n        case Task.SetNorth:\n        case Task.Scan: // use button A to do a scan first\n            for (let i = 0; i < 5; i++) {\n                basic.clearScreen()\n                basic.pause(100)\n                basic.showArrow(ArrowNames.West)\n            }\n            break\n\n        case Task.Measure: // OK, take a new heading measurement\n            basic.pause(200)\n            basic.clearScreen()\n            basic.pause(50)\n            let compass = heading.degrees()\n            basic.showNumber(Math.floor(compass))\n            basic.pause(500)\n            // now MANUALLY move to next test-angle...\n            basic.showLeds(`\n                    # # . # #\n                    # . . . #\n                    . . . . .\n                    # . . . #\n                    # # . # #\n                    `)\n            basic.pause(200)\n            break\n    }\n}\n\ninput.onButtonPressed(Button.A, function () {\n    performSetup()\n})\n\ninput.onButtonPressed(Button.B, function () {\n    measure()\n})\n\nlet nextTask: Task\nlet config = Config.Capture // --> Config.Live when A+B pressed\n\nfor (let i = 0; i < 5; i++) {\n    basic.clearScreen()\n    basic.pause(100)\n    basic.showString(\"C\") // no buggy, but use live magnetometer\n    basic.pause(1000)\n    basic.clearScreen()\n    basic.pause(200)\n    nextTask = Task.Scan // new mode, so always start with a scan\n    basic.showArrow(ArrowNames.West)\n}\nlet spinRPM = 0\n","README.md":"","pxt.json":"{\n    \"name\": \"capture heading\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1721804319131,"editorVersion":"7.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n/*enum Config {\n    Live, // Normal usage (but use turntable Jig to pretend it's on a buggy)\n    Capture, // Acquire new test datasets, using turntable Jig\n    Analyse, // Test & debug (dataset selection is preset in code below)\n    Trace, // Gather full diagnostics using dataLogger\n}\n*/\nenum Task {\n    Scan,\n    SetNorth,\n    Measure\n}\n// NOTE: check in \"pxt-heading.ts\" that the required test dataset is available in simulateScan()!\nconst dataset = \"blup70_0714_1743\"\n\nfunction performSetup() {\n    let result = 0\n    switch (nextTask) {\n        case Task.Scan:\n            let scanTime = 6000 // ...to MANUALLY rotate turntable jig twice (SMOOOOTHLY!)\n            basic.showString(\"S\")\n            basic.pause(1000)\n            basic.showString(\"_\")\n            let result = heading.scanClockwise(scanTime)\n            if (result == 0) {\n                basic.showIcon(IconNames.Yes)\n                logData(\"scan\", heading.scanTimes, heading.scanData)\n                basic.pause(1000)\n            } else {\n                basic.showIcon(IconNames.Skull) // problem with scan data analysis\n                basic.pause(1000)\n                basic.showNumber(result)\n                basic.pause(1000)\n                basic.clearScreen()\n                basic.showArrow(ArrowNames.West)\n                nextTask = Task.Scan // restart with a fresh scan\n            }\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth\n            break\n\n        case Task.SetNorth:\n            basic.showString(\"N\")\n            basic.pause(1000)\n            basic.clearScreen()\n            result = heading.setNorth()\n            spinRPM = heading.spinRate() // ...just out of interest\n            basic.showNumber(Math.floor(spinRPM))\n            basic.pause(1000)\n            basic.showIcon(IconNames.Yes)\n            basic.pause(500)\n            basic.showLeds(`\n                # # . # #\n                # . . . #\n                . . # . .\n                # . . . #\n                # # . # #\n                `)\n            basic.pause(500)\n            basic.showArrow(ArrowNames.East)\n            nextTask = Task.Measure\n            break\n\n        case Task.Measure: // Button A allows new North setting\n            basic.showIcon(IconNames.No)\n            basic.pause(1000)\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth // reset new North\n            break\n    }\n\n}\n\nfunction measure() {\n    switch (nextTask) {\n        // ? sequence error?\n        case Task.SetNorth:\n        case Task.Scan: // use button A to do a scan first\n            for (let i = 0; i < 5; i++) {\n                basic.clearScreen()\n                basic.pause(100)\n                basic.showArrow(ArrowNames.West)\n            }\n            break\n\n        case Task.Measure: // OK, take a new heading measurement\n            basic.pause(200)\n            basic.clearScreen()\n            basic.pause(50)\n            let compass = heading.degrees()\n            basic.showNumber(Math.floor(compass))\n            basic.pause(500)\n            // now MANUALLY move to next test-angle...\n            basic.showLeds(`\n                    # # . # #\n                    # . . . #\n                    . . . . .\n                    # . . . #\n                    # # . # #\n                    `)\n            basic.pause(200)\n            break\n    }\n}\n\n\n/* function logData(tag: string, times: number[], values: number[][]) {\n    let listT = \"let \" + tag + \"T = [\" + times[0]\n    let listX = \"let \" + tag + \"X = [\" + values[0][Dimension.X]\n    let listY = \"let \" + tag + \"Y = [\" + values[0][Dimension.Y]\n    let listZ = \"let \" + tag + \"Z = [\" + values[0][Dimension.Z]\n    for (let i = 1; i < times.length; i++) {\n        listT += \", \" + times[i]\n        listX += \", \" + values[i][Dimension.X]\n        listY += \", \" + values[i][Dimension.Y]\n        listZ += \", \" + values[i][Dimension.Z]\n    }\n    datalogger.log(\n        datalogger.createCV(\"\", listT + \"]\"),\n        datalogger.createCV(\"\", listX + \"]\"),\n        datalogger.createCV(\"\", listY + \"]\"),\n        datalogger.createCV(\"\", listZ + \"]\")\n    )\n}*/\n\nfunction logData(tag: string, times: number[], values: number[][]) {\n    let pushT: string\n    let pushD: string\n    for (let i = 1; i < times.length; i++) {\n        pushT = tag + \"Times.push(\" + times[i] + \")\"\n        datalogger.log(datalogger.createCV(\"\", pushT))\n        pushD = tag + \"Data.push([\" + values[i][Dimension.X]\n        pushD += \", \" + values[i][Dimension.Y]\n        pushD += \", \" + values[i][Dimension.Z]\n        datalogger.log(datalogger.createCV(\"\", pushD + \"])\"))\n    }\n}\n\ninput.onButtonPressed(Button.A, function () {\n    performSetup()\n})\n\ninput.onButtonPressed(Button.B, function () {\n    measure()\n})\n\ninput.onButtonPressed(Button.AB, function () {\n    logData(\"test\", heading.testTimes, heading.testData)\n})\n\nlet nextTask: Task\nfor (let i = 0; i < 5; i++) {\n    basic.clearScreen()\n    basic.pause(100)\n    basic.clearScreen()\n    basic.pause(200)\n    nextTask = Task.Scan // new mode, so always start with a scan\n    basic.showArrow(ArrowNames.West)\n}\nbasic.showString(\"C\") // no buggy, but use live magnetometer\nbasic.pause(1000)\nlet spinRPM = 0\n","README.md":"","pxt.json":"{\n    \"name\": \"capture heading\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-heading\": \"github:grandpabond/pxt-heading#v1.1.5\",\n        \"datalogger\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1721972636271,"editorVersion":"7.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n/*enum Config {\n    Live, // Normal usage (but use turntable Jig to pretend it's on a buggy)\n    Capture, // Acquire new test datasets, using turntable Jig\n    Analyse, // Test & debug (dataset selection is preset in code below)\n    Trace, // Gather full diagnostics using dataLogger\n}\n*/\nenum Task {\n    Scan,\n    SetNorth,\n    Measure\n}\n// NOTE: check in \"pxt-heading.ts\" that the required test dataset is available in simulateScan()!\nconst dataset = \"blup70_0714_1743\"\n\nfunction performSetup() {\n    let result = 0\n    switch (nextTask) {\n        case Task.Scan:\n            let scanTime = 6000 // ...to MANUALLY rotate turntable jig twice (SMOOOOTHLY!)\n            basic.showString(\"S\")\n            basic.pause(1000)\n            basic.showString(\"_\")\n            let result = heading.scanClockwise(scanTime)\n            if (result == 0) {\n                logData(\"scan\", heading.scanTimes, heading.scanData)\n                basic.showIcon(IconNames.Yes)\n                basic.pause(1000)\n            } else {\n                basic.showIcon(IconNames.Skull) // problem with scan data analysis\n                basic.pause(1000)\n                basic.showNumber(result)\n                basic.pause(1000)\n                basic.clearScreen()\n                basic.showArrow(ArrowNames.West)\n                nextTask = Task.Scan // restart with a fresh scan\n            }\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth\n            break\n\n        case Task.SetNorth:\n            basic.showString(\"N\")\n            basic.pause(1000)\n            basic.clearScreen()\n            result = heading.setNorth()\n            spinRPM = heading.spinRate() // ...just out of interest\n            basic.showNumber(Math.floor(spinRPM))\n            basic.pause(1000)\n            basic.showIcon(IconNames.Yes)\n            basic.pause(500)\n            basic.showLeds(`\n                # # . # #\n                # . . . #\n                . . # . .\n                # . . . #\n                # # . # #\n                `)\n            basic.pause(500)\n            basic.showArrow(ArrowNames.East)\n            nextTask = Task.Measure\n            break\n\n        case Task.Measure: // Button A allows new North setting\n            basic.showIcon(IconNames.No)\n            basic.pause(1000)\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth // reset new North\n            break\n    }\n\n}\n\nfunction measure() {\n    switch (nextTask) {\n        // ? sequence error?\n        case Task.SetNorth:\n        case Task.Scan: // use button A to do a scan first\n            for (let i = 0; i < 5; i++) {\n                basic.clearScreen()\n                basic.pause(100)\n                basic.showArrow(ArrowNames.West)\n            }\n            break\n\n        case Task.Measure: // OK, take a new heading measurement\n            basic.pause(200)\n            basic.clearScreen()\n            basic.pause(50)\n            let compass = heading.degrees()\n            basic.showNumber(Math.floor(compass))\n            basic.pause(500)\n            // now MANUALLY move to next test-angle...\n            basic.showLeds(`\n                    # # . # #\n                    # . . . #\n                    . . . . .\n                    # . . . #\n                    # # . # #\n                    `)\n            basic.pause(200)\n            break\n    }\n}\n\n\n/* function logData(tag: string, times: number[], values: number[][]) {\n    let listT = \"let \" + tag + \"T = [\" + times[0]\n    let listX = \"let \" + tag + \"X = [\" + values[0][Dimension.X]\n    let listY = \"let \" + tag + \"Y = [\" + values[0][Dimension.Y]\n    let listZ = \"let \" + tag + \"Z = [\" + values[0][Dimension.Z]\n    for (let i = 1; i < times.length; i++) {\n        listT += \", \" + times[i]\n        listX += \", \" + values[i][Dimension.X]\n        listY += \", \" + values[i][Dimension.Y]\n        listZ += \", \" + values[i][Dimension.Z]\n    }\n    datalogger.log(\n        datalogger.createCV(\"\", listT + \"]\"),\n        datalogger.createCV(\"\", listX + \"]\"),\n        datalogger.createCV(\"\", listY + \"]\"),\n        datalogger.createCV(\"\", listZ + \"]\")\n    )\n}*/\n\nfunction logData(tag: string, times: number[], values: number[][]) {\n    let pushT: string\n    let pushD: string\n    for (let i = 1; i < times.length; i++) {\n        pushT = tag + \"Times.push(\" + times[i] + \")\"\n        datalogger.log(datalogger.createCV(\"\", pushT))\n        pushD = tag + \"Data.push([\" + values[i][Dimension.X]\n        pushD += \", \" + values[i][Dimension.Y]\n        pushD += \", \" + values[i][Dimension.Z]\n        datalogger.log(datalogger.createCV(\"\", pushD + \"])\"))\n    }\n}\n\ninput.onButtonPressed(Button.A, function () {\n    performSetup()\n})\n\ninput.onButtonPressed(Button.B, function () {\n    measure()\n})\n\ninput.onButtonPressed(Button.AB, function () {\n    logData(\"test\", heading.testTimes, heading.testData)\n    basic.showIcon(IconNames.Yes)\n    basic.pause(1000)\n})\n\nlet nextTask: Task\nfor (let i = 0; i < 5; i++) {\n    basic.clearScreen()\n    basic.pause(100)\n    basic.clearScreen()\n    basic.pause(200)\n    nextTask = Task.Scan // new mode, so always start with a scan\n    basic.showArrow(ArrowNames.West)\n}\nbasic.showString(\"C\") // no buggy, but use live magnetometer\nbasic.pause(1000)\nlet spinRPM = 0\n","README.md":"","pxt.json":"{\n    \"name\": \"capture heading\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-heading\": \"github:grandpabond/pxt-heading#v1.1.5\",\n        \"datalogger\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1721975261587,"editorVersion":"7.0.13","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n/*enum Config {\n    Live, // Normal usage (but use turntable Jig to pretend it's on a buggy)\n    Capture, // Acquire new test datasets, using turntable Jig\n    Analyse, // Test & debug (dataset selection is preset in code below)\n    Trace, // Gather full diagnostics using dataLogger\n}\n*/\nenum Task {\n    Scan,\n    SetNorth,\n    Measure\n}\n// NOTE: check in \"pxt-heading.ts\" that the required test dataset is available in simulateScan()!\nconst dataset = \"blup70_0714_1743\"\n\nfunction performSetup() {\n    let result = 0\n    switch (nextTask) {\n        case Task.Scan:\n            let scanTime = 6000 // ...to MANUALLY rotate turntable jig twice (SMOOOOTHLY!)\n            basic.showString(\"S\")\n            basic.pause(1000)\n            basic.showString(\"_\")\n            let result = heading.scanClockwise(scanTime)\n            if (result == 0) {\n                logData(\"scan\", heading.scanTimes, heading.scanData)\n                basic.showIcon(IconNames.Yes)\n                basic.pause(1000)\n            } else {\n                basic.showIcon(IconNames.Skull) // problem with scan data analysis\n                basic.pause(1000)\n                basic.showNumber(result)\n                basic.pause(1000)\n                basic.clearScreen()\n                basic.showArrow(ArrowNames.West)\n                nextTask = Task.Scan // restart with a fresh scan\n            }\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth\n            break\n\n        case Task.SetNorth:\n            basic.showString(\"N\")\n            basic.pause(1000)\n            basic.clearScreen()\n            result = heading.setNorth()\n            spinRPM = heading.spinRate() // ...just out of interest\n            basic.showNumber(Math.floor(spinRPM))\n            basic.pause(1000)\n            basic.showIcon(IconNames.Yes)\n            basic.pause(500)\n            basic.showLeds(`\n                # # . # #\n                # . . . #\n                . . # . .\n                # . . . #\n                # # . # #\n                `)\n            basic.pause(500)\n            basic.showArrow(ArrowNames.East)\n            nextTask = Task.Measure\n            break\n\n        case Task.Measure: // Button A allows new North setting\n            basic.showIcon(IconNames.No)\n            basic.pause(1000)\n            basic.clearScreen()\n            basic.showArrow(ArrowNames.West)\n            nextTask = Task.SetNorth // reset new North\n            break\n    }\n\n}\n\nfunction measure() {\n    switch (nextTask) {\n        // ? sequence error?\n        case Task.SetNorth:\n        case Task.Scan: // use button A to do a scan first\n            for (let i = 0; i < 5; i++) {\n                basic.clearScreen()\n                basic.pause(100)\n                basic.showArrow(ArrowNames.West)\n            }\n            break\n\n        case Task.Measure: // OK, take a new heading measurement\n            basic.pause(200)\n            basic.clearScreen()\n            basic.pause(50)\n            let compass = heading.degrees()\n            basic.showNumber(Math.floor(compass))\n            basic.pause(500)\n            // now MANUALLY move to next test-angle...\n            basic.showLeds(`\n                    # # . # #\n                    # . . . #\n                    . . . . .\n                    # . . . #\n                    # # . # #\n                    `)\n            basic.pause(200)\n            break\n    }\n}\n\nfunction logData(tag: string, times: number[], values: number[][]) {\n    let pushT: string\n    let pushD: string\n    for (let i = 1; i < times.length; i++) {\n        pushT = tag + \"Times.push(\" + times[i] + \")\"\n        datalogger.log(datalogger.createCV(\"\", pushT))\n        pushD = tag + \"Data.push([\" + round3(values[i][Dimension.X])\n        pushD += \", \" + round3(values[i][Dimension.Y])\n        pushD += \", \" + round3(values[i][Dimension.Z])\n        datalogger.log(datalogger.createCV(\"\", pushD + \"])\"))\n    }\n}\n\n// limit to three decimal places\nfunction round3(v: number): number {\n    return (Math.round(1000 * v) / 1000)\n}\n\ninput.onButtonPressed(Button.A, function () {\n    performSetup()\n})\n\ninput.onButtonPressed(Button.B, function () {\n    measure()\n})\n\ninput.onButtonPressed(Button.AB, function () {\n    logData(\"test\", heading.testTimes, heading.testData)\n    basic.showIcon(IconNames.Yes)\n    basic.pause(1000)\n})\n\nlet nextTask: Task\nfor (let i = 0; i < 5; i++) {\n    basic.clearScreen()\n    basic.pause(100)\n    basic.clearScreen()\n    basic.pause(200)\n    nextTask = Task.Scan // new mode, so always start with a scan\n    basic.showArrow(ArrowNames.West)\n}\nbasic.showString(\"C\") // no buggy, but use live magnetometer\nbasic.pause(1000)\nlet spinRPM = 0\n","README.md":"","pxt.json":"{\n    \"name\": \"capture heading\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-heading\": \"github:grandpabond/pxt-heading#v1.1.5\",\n        \"datalogger\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[]}